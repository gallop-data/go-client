/*
Gallop API

Data and insights APIs, webooks, and dashboards enabling businesses to launch tokenized products in seconds.

API version: 1.0.0
Contact: support@higallop.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


// StarknetApiService StarknetApi service
type StarknetApiService service

type ApiGetSknMarketplaceDataRequest struct {
	ctx context.Context
	ApiService *StarknetApiService
	getSknMarketplaceDataRequest *GetSknMarketplaceDataRequest
}

func (r ApiGetSknMarketplaceDataRequest) GetSknMarketplaceDataRequest(getSknMarketplaceDataRequest GetSknMarketplaceDataRequest) ApiGetSknMarketplaceDataRequest {
	r.getSknMarketplaceDataRequest = &getSknMarketplaceDataRequest
	return r
}

func (r ApiGetSknMarketplaceDataRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetSknMarketplaceDataExecute(r)
}

/*
GetSknMarketplaceData Gallop Marketplace Data

Lists marketplace data from contract address.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSknMarketplaceDataRequest
*/
func (a *StarknetApiService) GetSknMarketplaceData(ctx context.Context) ApiGetSknMarketplaceDataRequest {
	return ApiGetSknMarketplaceDataRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *StarknetApiService) GetSknMarketplaceDataExecute(r ApiGetSknMarketplaceDataRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StarknetApiService.GetSknMarketplaceData")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/skn/getMarketplaceData"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getSknMarketplaceDataRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetSknMarketplaceFloorPriceRequest struct {
	ctx context.Context
	ApiService *StarknetApiService
	getSknMarketplaceFloorPriceRequest *GetSknMarketplaceFloorPriceRequest
}

func (r ApiGetSknMarketplaceFloorPriceRequest) GetSknMarketplaceFloorPriceRequest(getSknMarketplaceFloorPriceRequest GetSknMarketplaceFloorPriceRequest) ApiGetSknMarketplaceFloorPriceRequest {
	r.getSknMarketplaceFloorPriceRequest = &getSknMarketplaceFloorPriceRequest
	return r
}

func (r ApiGetSknMarketplaceFloorPriceRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetSknMarketplaceFloorPriceExecute(r)
}

/*
GetSknMarketplaceFloorPrice Marketplace Floor Price by Collection

Returns current floor price for all collections by marketplace

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetSknMarketplaceFloorPriceRequest
*/
func (a *StarknetApiService) GetSknMarketplaceFloorPrice(ctx context.Context) ApiGetSknMarketplaceFloorPriceRequest {
	return ApiGetSknMarketplaceFloorPriceRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *StarknetApiService) GetSknMarketplaceFloorPriceExecute(r ApiGetSknMarketplaceFloorPriceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StarknetApiService.GetSknMarketplaceFloorPrice")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data/skn/getMarketplaceFloorPrice"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getSknMarketplaceFloorPriceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["api_key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
